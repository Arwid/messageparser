 /**
 * JavaCC file for JSONMessageParser
 *
 * @author Arwid Bancewicz
 */options{ /* JDK_VERSION = "1.4"; */}PARSER_BEGIN(JSONMessageParser)package messageparser.common.message.parser.json;import java.util.HashMap;import java.io.Serializable;import java.util.Collections;import java.util.HashMap;import java.util.Map;import java.util.Date;import messageparser.common.message.parser.UniversalMessageParser;import messageparser.common.message.Predicate;import messageparser.common.message.Advertisement;import messageparser.common.message.Subscription;import messageparser.common.message.Publication;import messageparser.common.message.CompositeSubscription;import messageparser.common.message.CompositeSubscriptionOPs;import messageparser.common.message.CompositeNode;public class JSONMessageParser extends UniversalMessageParser{  public JSONMessageParser()  {}  public Publication parsePublication(String stringRep) throws ParseException  {    java.io.StringReader sr = new java.io.StringReader(stringRep);    java.io.Reader r = new java.io.BufferedReader(sr);    JSONMessageParser parser = new JSONMessageParser(r);    Publication o = parser.publication();    return o;  }  public Advertisement parseAdvertisement(String stringRep) throws ParseException  {    java.io.StringReader sr = new java.io.StringReader(stringRep);    java.io.Reader r = new java.io.BufferedReader(sr);    JSONMessageParser parser = new JSONMessageParser(r);    Advertisement o = parser.advertisement();    return o;  }  public Subscription parseSubscription(String stringRep) throws ParseException  {    java.io.StringReader sr = new java.io.StringReader(stringRep);    java.io.Reader r = new java.io.BufferedReader(sr);    JSONMessageParser parser = new JSONMessageParser(r);    Subscription o = parser.subscription();    return o;  }  public CompositeSubscription parseCompositeSubscription(String stringRep) throws ParseException  {    java.io.StringReader sr = new java.io.StringReader(stringRep);    java.io.Reader r = new java.io.BufferedReader(sr);    JSONMessageParser parser = new JSONMessageParser(r);    CompositeSubscription o = parser.compositeSubscription();    return o;  }  public Map < String, Serializable > parsePairMap(String stringRep) throws ParseException  {    java.io.StringReader sr = new java.io.StringReader(stringRep);    java.io.Reader r = new java.io.BufferedReader(sr);    JSONMessageParser parser = new JSONMessageParser(r);    Map < String, Serializable > o = parser.pairMap();    return o;  }  public Map < String, Predicate > parsePredicateMap(String stringRep) throws ParseException  {    java.io.StringReader sr = new java.io.StringReader(stringRep);    java.io.Reader r = new java.io.BufferedReader(sr);    JSONMessageParser parser = new JSONMessageParser(r);    Map < String, Predicate > o = parser.predicateMap();    return o;  }  public String printPairMap(Map < String, Serializable > pairMap)  {    String stringRep = "[";    stringRep += "[\"class\",\"" + pairMap.get("class") + "\"]";    synchronized (pairMap)    {      for (String attribute : pairMap.keySet())      {        if (attribute == null) break;        if (attribute.equalsIgnoreCase("class")) continue;        Object value = pairMap.get(attribute);        stringRep += ",[\"" + attribute + "\",";        if ((value.getClass()).equals(String.class) || (value.getClass()).equals(Date.class))        {          stringRep += "\"" + value + "\"";        }        else        {          stringRep += value;        }        stringRep += "]";      }    }    stringRep += "]";    return stringRep;  }  public String printPredicateMap(Map < String, Predicate > predicateMap)  {    String stringRep = "[";    stringRep += "[\"class\",\"eq\",\"" + predicateMap.get("class").getValue() + "\"]";    synchronized (predicateMap)    {      for (String attribute : predicateMap.keySet())      {        if (attribute.equalsIgnoreCase("class")) continue;        Predicate p = predicateMap.get(attribute);        stringRep += ",[\"" + attribute + "\",\"" + p.getOp() + "\",";        if ((p.getValue().getClass()).equals(String.class) || (p.getValue().getClass()).equals(Date.class))        {          stringRep += "\"" + p.getValue() + "\"";        }        else        {          stringRep += p.getValue();        }        stringRep += "]";      }    }    stringRep += "]";    return stringRep;  }  public String printCompositeNodes(CompositeNode root, Map < String, Subscription > subMap)  {    String rootToString = "";    if (root.content.equals(CompositeSubscriptionOPs.COMPOSIT_SUBSCRIPTION_AND) || root.content.equals(CompositeSubscriptionOPs.COMPOSIT_SUBSCRIPTION_OR))    {      rootToString = "[" + printCompositeNodes(root.leftNode, subMap) + ",[\"" + root.content + "\"]," + printCompositeNodes(root.rightNode, subMap) + "]";    }    else    {      Subscription sub = subMap.get(root.content);      rootToString = printPredicateMap(sub.getPredicateMap());    }    return rootToString;  }  public String print(Object obj)  {    String ret = "";    ret += "{";    if (obj instanceof Publication)    {      ret += "\"publish\":";      Publication pub = (Publication) obj;      ret += printPairMap(pub.getPairMap());      ret += ",\"timestamp\":\"" + pub.getTimeStamp() + "\"";    }    else if (obj instanceof Advertisement)    {      ret += "\"advertise\":";      Advertisement adv = (Advertisement) obj;      ret += printPredicateMap(adv.getPredicateMap());      //ret += ",\"timestamp\":\""+pub.getTimeStamp()+"\"";
    }    else if (obj instanceof Subscription)    {      ret += "\"subscribe\":";      Subscription sub = (Subscription) obj;      ret += printPredicateMap(sub.getPredicateMap());    }    else if (obj instanceof CompositeSubscription)    {      ret += "\"cs\":";      CompositeSubscription sub = (CompositeSubscription) obj;      ret += printCompositeNodes(sub.getRoot(), sub.getSubscriptionMap());    }    ret += "}";    return ret;  }  /* Main method for testing */  public static void main(String args [])  {    while (true)    {      try      {        JSONMessageParser parser = new JSONMessageParser(System.in);        //Map < String, Serializable > o = parser.pairMap();
        //Map < String, Predicate > o = parser.terminatedPredicateMap();
        //CompositeSubscription o = parser.compositeSubscription();
        Publication o = parser.publication();        System.err.println("JAVA OBJECT: " + o);      }      catch (Exception err)      {        err.printStackTrace();      }    }  }}PARSER_END(JSONMessageParser)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{  < SOPERATOR :    "eq"  | "str-le"  | "str-lt"  | "str-gt"  | "str-ge"  | "str-prefix"  | "str-postfix"  | "str-contains"  | "neq" >| < NOPERATOR :    "="  | "<"  | ">"  | "<="  | ">="  | "<>" >| < COPERATOR : "isPresent" >| < LOPERATOR :    "&"  | "||" >| < QUOTED_SOPERATOR : "\"" < SOPERATOR > "\"" >| < QUOTED_NOPERATOR : "\"" < NOPERATOR > "\"" >| < QUOTED_COPERATOR : "\"" < COPERATOR > "\"" >| < QUOTED_LOPERATOR : "\"" < LOPERATOR > "\"" >}TOKEN :{  < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >| < #SIGN : [ "-", "+" ] >| < #EXPONENT :    (      "E"    | "e"    )    (< SIGN >)? (< DIGIT >)+ >| < FLOATING_NUMBER :    (< SIGN >)? (< DIGIT >)* "." (< DIGIT >)* (< EXPONENT >)?  | (< DIGIT >)+ (< EXPONENT >) >| < INT_NUMBER : (< SIGN >)? (< DIGIT >)+ >| < IDENTIFIER :    "\"" < LETTER >    (      < LETTER >    | < DIGIT >    | "-"    )*    "\"" >| < #ESCAPE_CHAR : "\\" [ "n", "t", "b", "r", "f", "\\", "'", "\"" ] >| < DOUBLE_QUOTE_LITERAL :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    | < ESCAPE_CHAR >    )+    "\"" >| < COMMA : "," >| < OPEN_CPAR : "{" >| < CLOSE_CPAR : "}" >| < OPEN_PAR : "[" >| < CLOSE_PAR : "]" >| < COLON : ":" >| < SEMI_COLON : ";" >| < QUOTE : "\"" >}public Publication publication() :{  Map < String, Serializable > map;  Publication p = new Publication();  Token i;}{  (    < OPEN_CPAR > i = < IDENTIFIER > < COLON > < OPEN_PAR > map = pairMap() < CLOSE_PAR > < CLOSE_CPAR >  )  {    String c = unescape(i.toString());    if (!(c.equals("p") || c.equals("publish"))) throw new ParseException("Not a publication.");    p.setPairMap(map);    return p;  }}public Advertisement advertisement() :{  Map < String, Predicate > map;  Advertisement a = new Advertisement();  Token i;}{  (    < OPEN_CPAR > i = < IDENTIFIER > < COLON > < OPEN_PAR > map = predicateMap() < CLOSE_PAR > < CLOSE_CPAR >  )  {    String c = unescape(i.toString());    if (!(c.equals("a") || c.equals("advertise"))) throw new ParseException("Not an advertisement.");    a.setPredicateMap(map);    return a;  }}public Subscription subscription() :{  Map < String, Predicate > map;  Subscription s = new Subscription();  Token i;}{  (    < OPEN_CPAR > i = < IDENTIFIER > < COLON > < OPEN_PAR > map = predicateMap() < CLOSE_PAR > < CLOSE_CPAR >  )  {    String c = unescape(i.toString());    if (!(c.equals("s") || c.equals("subscribe"))) throw new ParseException("Not a subscription.");    s.setPredicateMap(map);    return s;  }}public String string() :{  Token t;}{  (    t = < DOUBLE_QUOTE_LITERAL >    {      return unescape(t.image);    }  | t = < IDENTIFIER >    {      return unescape(t.toString());    }  )}public Serializable number() :{  Token t;}{  (    t = < FLOATING_NUMBER >    {      return new Double(t.image);    }  | t = < INT_NUMBER >    {      return new Long(t.image);    }  )}public Serializable object() :{  Serializable o;}{  (    o = number()    {      return o;    }  | o = string()    {      return o;    }  )}public void keyValue(Map < String, Serializable > map) :{  Token i;  Serializable v;}{  (    < OPEN_PAR > i = < IDENTIFIER > < COMMA > v = object() < CLOSE_PAR >  )  {    map.put(unescape(i.image), v);  }}public Predicate predicate() :{  Token o;  Serializable v;}{  (    o = < QUOTED_SOPERATOR > < COMMA > v = string()    {      return new Predicate(unescape(o.image), v);    }  | o = < QUOTED_NOPERATOR > < COMMA > v = number()    {      return new Predicate(unescape(o.image), v);    }  | o = < QUOTED_COPERATOR > < COMMA >    (      v = string()    | v = number()    )    {      return new Predicate(unescape(o.image), v);    }  )}public void keyPredicate(Map < String, Predicate > map) :{  Token k;  Predicate p;}{  (    < OPEN_PAR > k = < IDENTIFIER > < COMMA > p = predicate() < CLOSE_PAR >  )  {    map.put(unescape(k.image), p);  }}public Map < String, Serializable > pairMap() :{  Map < String, Serializable > map = Collections.synchronizedMap  (    new HashMap < String, Serializable > ()  )  ;}{  (    keyValue(map)    (      < COMMA > keyValue(map)    )*  )  {    if (!map.containsKey("class")) throw new ParseException("The class attribute is missing.");    return map;  }}public Map < String, Serializable > terminatedPairMap() :{  Map < String, Serializable > map;}{  map = pairMap() (";")  {    return map;  }}public Map < String, Predicate > predicateMap() :{  Map < String, Predicate > map = Collections.synchronizedMap  (    new HashMap < String, Predicate > ()  )  ;}{  (    keyPredicate(map)    (      < COMMA > keyPredicate(map)    )*  )  {    if (!map.containsKey("class")) throw new ParseException("The class attribute is missing.");    return map;  }}public Map < String, Predicate > terminatedPredicateMap() :{  Map < String, Predicate > map;}{  map = predicateMap() (";")  {    return map;  }}public CompositeNode subComposite(Map < String, Subscription > map) :{  Map < String, Predicate > pmap;  CompositeNode node;}{  (    LOOKAHEAD(2)    < OPEN_PAR > pmap = predicateMap() < CLOSE_PAR >    {      Subscription sub = new Subscription();      sub.setPredicateMap(pmap);      String key = "s" + (map.size() + 1);      node = new CompositeNode();      node.content = key;      map.put(key, sub);      return node;    }  | node = composite(map)    {      return node;    }  )}public CompositeNode composite(Map < String, Subscription > map) :{  CompositeNode lnode;  CompositeNode rnode;  Token o;}{  (    < OPEN_PAR > lnode = subComposite(map)    (      < COMMA > < OPEN_PAR > o = < QUOTED_LOPERATOR > < CLOSE_PAR > < COMMA > rnode = subComposite(map)    )    < CLOSE_PAR >  )  {    CompositeNode node = new CompositeNode();    node.leftNode = lnode;    lnode.setParentNode(node);    node.rightNode = rnode;    rnode.setParentNode(node);    node.content = unescape(o.toString());    return node;  }}public CompositeSubscription compositeSubscription() :{  //getAtomicSubscription
  Map < String, Subscription > map = new HashMap < String, Subscription > ();  CompositeSubscription cs = new CompositeSubscription();  CompositeNode node;  Token i;}{  (    < OPEN_CPAR > i = < IDENTIFIER > < COLON > node = composite(map) < CLOSE_CPAR >  )  {    String c = unescape(i.toString());    if (!(c.toString().equals("cs"))) throw new ParseException("Not a composite subscription.");    cs.setRoot(node);    cs.setSubscriptionMap(map);    cs.setAtomicSubscriptionNumber(map.size());    return cs;  }}
